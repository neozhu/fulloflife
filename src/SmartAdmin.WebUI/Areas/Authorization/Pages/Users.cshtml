@page
@model UserModel
@using CleanArchitecture.Razor.Application.Hubs.Constants
@using CleanArchitecture.Razor.Application.Constants.Permission
@inject Microsoft.Extensions.Localization.IStringLocalizer<UserModel> _localizer
@inject Microsoft.AspNetCore.Authorization.IAuthorizationService _authorizationService
@{
    ViewData["Title"] = _localizer["Application Users"].Value;
    ViewData["PageName"] = "authorization_users";
    ViewData["Heading"] = _localizer["Application Users"].Value;
    ViewData["Category1"] = _localizer["Authorization"].Value;
    ViewData["PageDescription"] = _localizer["See all available options"].Value;
    ViewData["PageIcon"] = "fa-shield-alt";
    ViewData["PreemptiveClass"] = "Default";
    var _canCreate = await _authorizationService.AuthorizeAsync(User, null, Permissions.Users.Create);
    var _canEdit = await _authorizationService.AuthorizeAsync(User, null, Permissions.Users.Edit);
    var _canDelete = await _authorizationService.AuthorizeAsync(User, null, Permissions.Users.Delete);
    var _canSearch = await _authorizationService.AuthorizeAsync(User, null, Permissions.Users.Search);
    var _canImport = await _authorizationService.AuthorizeAsync(User, null, Permissions.Users.Import);
    var _canExport = await _authorizationService.AuthorizeAsync(User, null, Permissions.Users.Export);
    var _canActive = await _authorizationService.AuthorizeAsync(User, null, Permissions.Users.Active);
    var _canManageRoles = await _authorizationService.AuthorizeAsync(User, null, Permissions.Users.ManageRoles);
    var _canRestPassword = await _authorizationService.AuthorizeAsync(User, null, Permissions.Users.RestPassword);
}

@section HeadBlock {
    <link rel="stylesheet" media="screen, print" href="~/css/datagrid/datatables/datatables.bundle.css">
    <link rel="stylesheet" media="screen, print" href="~/css/formplugins/select2/select2.bundle.css">
    <link rel="stylesheet" media="screen,print" href="~/lib/easyui/themes/insdep/easyui.css">
    <style>

        .user_dg_datagrid-cell-c1-_action {
            overflow: visible !important
        }
    </style>
}
<div id="js-page-content-demopanels" class="card mb-g">
    <div class="card-header bg-white d-flex align-items-center">
        <h4 class="m-0">
            @_localizer["Application Users"]
            <small>@_localizer["See all available options"]</small>
        </h4>
        <div class="ml-auto">
            @if (_canActive.Succeeded)
            {
                <button class="btn btn-sm btn-outline-primary " id="activebutton">
                    <span class="@(Settings.Theme.IconPrefix) fa-magic mr-1"></span>
                    @_localizer["Active"]
                </button>
            }
            @if (_canCreate.Succeeded)
            {
                <button class="btn btn-sm btn-outline-primary " id="addbutton">
                    <span class="@(Settings.Theme.IconPrefix) fa-plus mr-1"></span>
                    @_localizer["Add"]
                </button>
            }
            @if (_canDelete.Succeeded)
            {
                <button class="btn btn-sm btn-outline-danger" disabled id="deletebutton">
                    <span class="@(Settings.Theme.IconPrefix) fa-trash-alt mr-1"></span>
                    @_localizer["Delete"]
                </button>
            }
            @if (_canSearch.Succeeded)
            {
                <button class="btn btn-sm btn-outline-primary " id="searchbutton">
                    <span class="@(Settings.Theme.IconPrefix) fa-search mr-1"></span>
                    @_localizer["Search"]
                </button>
            }
            @if (_canImport.Succeeded)
            {
                <div class="btn-group" role="group">
                    <button id="importbutton" type="button" class="btn btn-sm  btn-outline-primary waves-effect waves-themed">
                        <span class="@(Settings.Theme.IconPrefix) fa-upload mr-1"></span>   @_localizer["Import Excel"]
                    </button>
                    <button type="button" class="btn btn-sm btn-outline-primary dropdown-toggle dropdown-toggle-split waves-effect waves-themed" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <span class="sr-only">Toggle Dropdown</span>
                    </button>
                    <div class="dropdown-menu" aria-labelledby="importbutton">
                        <button id="gettemplatebutton" class="dropdown-item">@_localizer["Download Template"]</button>
                    </div>
                </div>
            }
            @if (_canExport.Succeeded)
            {
                <button class="btn btn-sm btn-outline-primary " id="exportbutton">
                    <span class="@(Settings.Theme.IconPrefix) fa-download mr-1"></span>
                    @_localizer["Export Excel"]
                </button>
            }
        </div>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-12">
                <table id="user_dg">
                </table>
            </div>
        </div>
    </div>
</div>

<!--register a user-->
<div class="modal fade" id="register_modal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog " role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@_localizer["Create a user"]</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true"><i class="@(Settings.Theme.IconPrefix) fa-times"></i></span>
                </button>
            </div>
            <form id="register_form" class="needs-validation" novalidate="novalidate">
                <div class="modal-body">
                    @Html.AntiForgeryToken()
                    <div class="form-group">
                        <label class="form-label"> @_localizer["Your site name"]</label>
                        <input type="text" asp-for="RegisterFormModel.Site" class="form-control" placeholder="Site name" required="required" />
                        <span class="invalid-feedback" asp-validation-for="RegisterFormModel.Site">Sorry, you missed this one.</span>
                    </div>
                    <div class="form-group">
                        <label class="form-label">@_localizer["Login user name"]</label>
                        <input type="text" asp-for="RegisterFormModel.UserName" class="form-control" placeholder="User Name" required="required" />
                        <span class="invalid-feedback" asp-validation-for="RegisterFormModel.UserName">Sorry, you missed this one.</span>
                    </div>
                    <div class="form-group">
                        <label class="form-label">@_localizer["Your display name"]</label>
                        <input type="text" asp-for="RegisterFormModel.DisplayName" class="form-control" placeholder="Display name" required="required" />
                        <span class="invalid-feedback" asp-validation-for="RegisterFormModel.DisplayName">Sorry, you missed this one.</span>

                    </div>
                    <div class="form-group">
                        <label class="form-label" asp-for="RegisterFormModel.Email">@_localizer["Email will be needed for verification and account recovery"]</label>
                        <input type="email" asp-for="RegisterFormModel.Email" class="form-control" placeholder="Email for verification" value="" required="required" />
                        <span class="invalid-feedback" asp-validation-for="RegisterFormModel.Email">Sorry, you missed this one.</span>

                    </div>
                    <div class="form-group">
                        <label class="form-label" asp-for="RegisterFormModel.PhoneNumber">@_localizer["Phone Number"]</label>
                        <input type="text" asp-for="RegisterFormModel.PhoneNumber" class="form-control" placeholder="PhoneNumber for verification" value="" />
                        <span class="invalid-feedback" asp-validation-for="RegisterFormModel.PhoneNumber">Sorry, you missed this one.</span>

                    </div>
                    <div class="form-group">
                        <label class="form-label" asp-for="RegisterFormModel.Password">@_localizer["Please pick a password"]</label>
                        <input type="password" asp-for="RegisterFormModel.Password" class="form-control" placeholder="Email for verification (minimum 6 characters)" value="" required="required" pattern="^(?=.*?[A-Z])(?=(.*[a-z]){1,})(?=(.*[\d]){1,})(?=(.*[\W]){1,})(?!.*\s).{6,}$" />
                        <span class="invalid-feedback" asp-validation-for="RegisterFormModel.Password">Sorry, you missed this one.</span>
                        <div class="help-block">Your password must be 6-20 characters long, contain letters and numbers, and must not contain spaces, special characters, or emojis.</div>
                    </div>
                    <div class="form-group">
                        <label class="form-label" asp-for="RegisterFormModel.ConfirmPassword">@_localizer["Please confirm your password"]</label>
                        <input type="password" asp-for="RegisterFormModel.ConfirmPassword" class="form-control" placeholder="Email for verification (minimum 6 characters)" value="" required="required" pattern="^(?=.*?[A-Z])(?=(.*[a-z]){1,})(?=(.*[\d]){1,})(?=(.*[\W]){1,})(?!.*\s).{6,}$" />
                        <span class="invalid-feedback" asp-validation-for="RegisterFormModel.ConfirmPassword">Sorry, you missed this one.</span>
                    </div>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">@_localizer["Close"]</button>
                    <button type="submit" class="btn btn-primary">@_localizer["Save"]</button>
                </div>
            </form>
        </div>
    </div>
</div>


<!--Edit a user-->
<div class="modal fade" id="edituser_modal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog " role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@_localizer["Edit user"]</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true"><i class="@(Settings.Theme.IconPrefix) fa-times"></i></span>
                </button>
            </div>
            <form id="edituser_form" class="needs-validation" novalidate="novalidate">
                <div class="modal-body">
                    <input type="hidden" asp-for="EditFormModel.Id" />
                    @Html.AntiForgeryToken()
                    <div class="form-group">
                        <label class="form-label">@_localizer["User Name"]</label>
                        <input type="text" asp-for="EditFormModel.UserName" class="form-control" placeholder="User Name" readonly="readonly" />
                        <span class="invalid-feedback" asp-validation-for="RegisterFormModel.UserName">Sorry, you missed this one.</span>
                    </div>
                    <div class="form-group">
                        <label class="form-label"> @_localizer["Your site name"]</label>
                        <input type="text" asp-for="EditFormModel.Site" class="form-control" placeholder="Site name" required="required" />
                        <span class="invalid-feedback" asp-validation-for="EditFormModel.Site">Sorry, you missed this one.</span>
                    </div>

                    <div class="form-group">
                        <label class="form-label">@_localizer["Your display name"]</label>
                        <input type="text" asp-for="EditFormModel.DisplayName" class="form-control" placeholder="Display name" required="required" />
                        <span class="invalid-feedback" asp-validation-for="EditFormModel.DisplayName">Sorry, you missed this one.</span>

                    </div>
                    <div class="form-group">
                        <label class="form-label" asp-for="EditFormModel.Email">@_localizer["Email"]</label>
                        <input type="email" asp-for="EditFormModel.Email" class="form-control" placeholder="Email for verification" value="" required="required" />
                        <span class="invalid-feedback" asp-validation-for="EditFormModel.Email">Sorry, you missed this one.</span>
                    </div>
                    <div class="form-group">
                        <label class="form-label" asp-for="EditFormModel.PhoneNumber">@_localizer["Phone Number"]</label>
                        <input type="text" asp-for="EditFormModel.PhoneNumber" class="form-control" placeholder="PhoneNumber for verification" value="" />
                        <span class="invalid-feedback" asp-validation-for="EditFormModel.PhoneNumber">Sorry, you missed this one.</span>

                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">@_localizer["Close"]</button>
                    <button type="submit" class="btn btn-primary">@_localizer["Save"]</button>
                </div>
            </form>
        </div>
    </div>
</div>
<!--reset password-->
<div class="modal fade" id="resetpassword_modal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog " role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@_localizer["Reset password"]</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true"><i class="@(Settings.Theme.IconPrefix) fa-times"></i></span>
                </button>
            </div>
            <form id="resetpassword_form" class="needs-validation" novalidate="novalidate">
                <div class="modal-body">
                    <input type="hidden" asp-for="ResetFormModel.Id" />
                    @Html.AntiForgeryToken()
                    <div class="form-group">
                        <label class="col-xl-12 form-label">@_localizer["User Name"]</label>
                        <input type="text" asp-for="ResetFormModel.UserName" class="form-control" placeholder="User Name" readonly="readonly" />
                        <span class="invalid-feedback" asp-validation-for="ResetFormModel.UserName">Sorry, you missed this one.</span>
                    </div>
                    <div class="form-group">
                        <label class="form-label" asp-for="ResetFormModel.Password">@_localizer["New password"]</label>
                        <input type="password" asp-for="ResetFormModel.Password" class="form-control" placeholder="Password (minimum 6 characters)" value="" required="required" pattern="^(?=.*?[A-Z])(?=(.*[a-z]){1,})(?=(.*[\d]){1,})(?=(.*[\W]){1,})(?!.*\s).{6,}$" />
                        <span class="invalid-feedback" asp-validation-for="ResetFormModel.Password">Sorry, you missed this one.</span>
                        <div class="help-block">Your password must be 6-20 characters long, contain letters and numbers, and must not contain spaces, special characters, or emojis.</div>
                    </div>
                    <div class="form-group">
                        <label class="form-label" asp-for="ResetFormModel.ConfirmPassword">@_localizer["Confirm your password"]</label>
                        <input type="password" asp-for="ResetFormModel.ConfirmPassword" class="form-control" placeholder="Confirm password (minimum 6 characters)" value="" required="required" pattern="^(?=.*?[A-Z])(?=(.*[a-z]){1,})(?=(.*[\d]){1,})(?=(.*[\W]){1,})(?!.*\s).{6,}$" />
                        <span class="invalid-feedback" asp-validation-for="RegisterFormModel.ConfirmPassword">Sorry, you missed this one.</span>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">@_localizer["Close"]</button>
                    <button type="submit" class="btn btn-primary">@_localizer["Save"]</button>
                </div>
            </form>
        </div>
    </div>
</div>
<!--Manage roles-->
<div class="modal fade" id="manageroles_modal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-dialog-right modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title h4">@_localizer["Manage Roles"]</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true"><i class="@(Settings.Theme.IconPrefix) fa-times"></i></span>
                </button>
            </div>
            <form id="manageroles_form" class="needs-validation" novalidate="novalidate">
                <input type="hidden" asp-for="UserId" />
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <div class="card mb-g">
                        <div class="card-body p-3">
                            <h5 class="frame-heading">@_localizer["Assign roles"]</h5>
                            <div class="frame-wrap">
                                <div class="demo">
                                    @foreach (var role in Model.Roles)
                                    {
                                        <div class="custom-control custom-checkbox">
                                            <input type="checkbox" class="custom-control-input" value="@role" name="Roles" id="@role">
                                            <label class="custom-control-label" for="@role">@role</label>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">@_localizer["Close"]</button>
                    <button type="submit" class="btn btn-primary">@_localizer["Update roles"]</button>
                </div>
            </form>
        </div>
    </div>
</div>
@await Component.InvokeAsync("ImportExcel", new
{
    importUri = "/authorization/users?handler=Import",
    getTemplateUri = "/authorization/users?handler=CreateTemplate",
    onImportedSucceeded = "reload()"
})
@section ScriptsBlock {
    <partial name="_ValidationScriptsPartial" />
    <script type="text/javascript" src="~/lib/easyui/jquery.easyui.min.js" asp-append-version="true"></script>
    <script type="text/javascript" src="~/lib/easyui/jquery.easyui.component.js" asp-append-version="true"></script>
    <script type="text/javascript" src="~/lib/easyui/plugins/datagrid-filter.js" asp-append-version="true"></script>
    <script>jQuery.fn.tooltip = bootstrapTooltip;</script>
    <script src="~/lib/jquery-form/jquery.jsonToForm.js"></script>
    <script src="~/js/formplugins/select2/select2.bundle.js"></script>
    <script>

        $('#searchbutton').click(function () {
            reload();
        });
        $('#addbutton').click(function () {
            popupregistermodal();
        });
        $('#deletebutton').click(function () {
            onDeleteChecked();
        });
        $('#activebutton').click(function () {
            onActiveChecked();
        });
        $('#exportbutton').click(function () {
            onExport();
        });
        $('#importbutton').click(function () {
            showImportModal();
        });
        $('#gettemplatebutton').click(function () {
            onGetTemplate();
        });
        var reload = () => {
            $dg.datagrid('load', '/authorization/users?handler=Data');
        }
      var $dg={};
        var initdatagrid = () => {
            $dg = $('#user_dg').datagrid({
                height: (window.innerHeight-320),
                method: 'GET',
                rownumbers: false,
                singleSelect: true,
                selectOnCheck: false,
                checkOnSelect: false,
                pagination: true,
                clientPaging: false,
                remoteFilter: true,
                sortName: 'UserName',
                sortOrder:'asc',
                pageSize: 15,
                pageList: [10, 15, 30, 50, 100, 1000],
                onBeforeLoad: function () {
                    $('#deletebutton').prop('disabled', true);
                    $('#activebutton').prop('disabled', true);
                },
                onCheckAll: function (rows) {
                    const checked = $(this).datagrid('getChecked').length > 0;
                    $('#deletebutton').prop('disabled', !checked);
                    $('#activebutton').prop('disabled', !checked);
                },
                onUncheckAll: function () {
                    $('#deletebutton').prop('disabled', true);
                    $('#activebutton').prop('disabled', true);
                },
                onCheck: function () {
                    $('#deletebutton').prop('disabled', false);
                    $('#activebutton').prop('disabled', false);
                },
                onUncheck: function () {
                    const checked = $(this).datagrid('getChecked').length > 0;
                    $('#deletebutton').prop('disabled', !checked);
                    $('#activebutton').prop('disabled', !checked);
                },
                columns: [[
                    { field: 'ck', checkbox: true },
                    {
                        field: '_action',
                        title: '@_localizer["Command"]',
                        width: 100,
                        align: 'center',
                        formatter: function (value, row, index) {
                            return `<div class="btn-group" role="group">
                                      <button id="commandbtngroup" type="button" @(_canEdit.Succeeded? "":"disabled")  class="btn btn-outline-primary btn-sm dropdown-toggle waves-effect waves-themed" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                        <i class="@(Settings.Theme.IconPrefix) fa-edit"></i>
                                      </button>
                                      <div class="dropdown-menu dropdown-menu-animated" aria-labelledby="commandbtngroup">
                                         <button class="dropdown-item" onclick="onResetPassword(${index})"@(_canRestPassword.Succeeded? "":"disabled")><i class="fal fa-key mr-1"></i> @_localizer["Reset Password"]</button>
                                         <button class="dropdown-item" onclick="onRoleManage(${index})" @(_canManageRoles.Succeeded? "":"disabled")><i class="fal fa-users-medical mr-1"></i> @_localizer["Manage Roles"]</button>
                                         <button class="dropdown-item" onclick="onEdit(${index})" @(_canEdit.Succeeded? "":"disabled")><i class="fal fa-edit mr-1"></i> @_localizer["Edit"]</button>
                                         <button class="dropdown-item" onclick="onDelete('${row.Id}')" @(_canDelete.Succeeded? "":"disabled")><i class="fal fa-trash-alt mr-1"></i> @_localizer["Delete"]</button>
                                      </div>
                                   </div>`;
                        }
                    },
					{
                        field: 'IsLive',
                        title: '@_localizer["Avatar"]',
                        align: 'center',
                        formatter: function (value, row, index) {
                            if (value) {
                                return `<span class="status status-success">
                                           <span class="profile-image rounded-circle d-inline-block" style="background-image:url('${row.ProfilePictureDataUrl}');background-repeat:no-repeat;background-size:100% 100%;-moz-background-size:100% 100%;"></span>
                                        </span>`;
                            } else {
                                return `<span class="status status-danger">
                                           <span class="profile-image rounded-circle d-inline-block" style="background-image:url('${row.ProfilePictureDataUrl}');background-repeat:no-repeat;background-size:100% 100%;-moz-background-size:100% 100%;"></span>
                                        </span>`;
                            }
                        },
                        sortable: false,
                        width: 150
                    },
                    { field: 'Site', title: '@_localizer["Site"]', sortable: true, width: 130 },
                    { field: 'UserName', title: '@_localizer["User Name"]', sortable: true, width: 150 },
                    { field: 'DisplayName', title: '@_localizer["Display Name"]', sortable: true, width: 160 },
                    { field: 'Email', title: '@_localizer["Email"]', sortable: true, width: 190 },
                    { field: 'PhoneNumber', title: '@_localizer["Phone Number"]', sortable: true, width: 150 },
                    {
                        field: 'IsActive', title: '@_localizer["Is Active"]',
                        align: 'center',
                        formatter: checkboxformatter,
                        sortable: true, width: 150
                    },
                    {
                        field: 'EmailConfirmed', title: '@_localizer["Email Confirmed"]',
                        align: 'center',
                        formatter: checkboxformatter,
                        sortable: true, width: 150
                    },
					{
                        field: 'LockoutEnd',
                        title: '@_localizer["Lock Status"]',
                        align: 'center',
                        formatter: function (value, row, index) {
                            if (value != null && moment(value) > moment().utc()) {
                                return `<a href="javascript:onUnlock('${row.Id}');" class="btn btn-outline-danger btn-sm btn-icon rounded-circle waves-effect waves-themed">
                                         <i class="fal fa-lock"></i>
							           </a>`;
                            } else {
                                return `<a href="javascript:onLock('${row.Id}');" class="btn btn-outline-info btn-sm btn-icon rounded-circle waves-effect waves-themed">
                                         <i class="fal fa-lock-open"></i>
							           </a>`;
                            }
                        },
                        sortable: false,
                        width: 150
                    },
                ]]
            })
                .datagrid('enableFilter', {})
                .datagrid('load', '/authorization/users?handler=Data');

        }
        var onEdit = (index) => {

            var user = $dg.datagrid('getRows')[index];
            popupeditmodal(user);
        }
        var onResetPassword = (index) => {

            var user = $dg.datagrid('getRows')[index];
            popupresetpasswordmodal(user);
        }
        var onLock = (id) => {
            axios.get('/authorization/users?handler=Lock&id=' + id).then(res => {
                //console.log(res);
                toastr["error"]('@_localizer["Locked success"]');
                reload();
            })
               
        }
        var onUnlock = (id) => {
            axios.get('/authorization/users?handler=UnLock&id=' + id).then(res => {
                //console.log(res);
                toastr["info"]('@_localizer["Unlocked success"]');
                reload();
            })
                
        }


        var onDelete = (id) => {
            bootbox.confirm({
                message: "@_localizer["Are you sure delete a user?"]",
                buttons: {
                    confirm: {
                        label: '@_localizer["Yes"]',
                        className: 'btn-success'
                    },
                    cancel: {
                        label: '@_localizer["No"]',
                        className: 'btn-danger'
                    }
                },
                callback: function (result) {
                    if (result) {
                        axios.get('/authorization/users?handler=Delete&id=' + id).then(res => {
                            toastr["info"]('@_localizer["Delete successfully"]');
                            reload();
                        })
                            
                    }
                }
            })
        }
        var onActiveChecked = () => {
            var checkedId = $dg.datagrid('getChecked').map(x => x.Id);
            if (checkedId.length > 0) {
                bootbox.confirm({
                    message: "@_localizer["Are you sure active checked users?"]",
                    buttons: {
                        confirm: {
                            label: '@_localizer["Yes"]',
                            className: 'btn-success'
                        },
                        cancel: {
                            label: '@_localizer["No"]',
                            className: 'btn-danger'
                        }
                    },
                    callback: function (result) {
                        if (result) {
                            var paras = new URLSearchParams(checkedId.map(s => ['id', s]));
                            console.log(paras.toString())
                            axios.get('/authorization/users?handler=ActiveChecked&' + paras.toString()).then(res => {
                                toastr["info"](`@_localizer["Active ${checkedId.length} Success"]`);
                                reload();
                            })
                                
                        }
                    }
                });

            }
        }
        var onDeleteChecked = () => {
            var checkedId = $dg.datagrid('getChecked').map(x => x.Id);
            if (checkedId.length > 0) {
                bootbox.confirm({
                    message: "@_localizer["Are you sure delete checked users?"]",
                    buttons: {
                        confirm: {
                            label: '@_localizer["Yes"]',
                            className: 'btn-success'
                        },
                        cancel: {
                            label: '@_localizer["No"]',
                            className: 'btn-danger'
                        }
                    },
                    callback: function (result) {
                        if (result) {
                            var paras = new URLSearchParams(checkedId.map(s => ['id', s]));
                            axios.post('/authorization/users?handler=DeleteChecked&' + paras.toString()).then(res => {
                                toastr["info"](`@_localizer["Delete ${checkedId.length} successfully"]`);
                                reload();
                            })
                                
                        }
                    }
                });

            }
        }
        var onExport = () => {
            var options = $dg.datagrid('options');
            var data = {
                filterRules: JSON.stringify(options.filterRules),
                sort: options.sortName,
                order: options.sortOrder,
            }
            axios.post('/authorization/users?handler=Export',
                data,
                {
                    responseType: "blob"
                })
                .then(response => {
                    const filename = getFileName(response.headers['content-disposition']);
                    const url = window.URL.createObjectURL(new Blob([response.data], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8' }));
                    const link = document.createElement('a');
                    link.href = url;
                    link.setAttribute('download', filename);
                    document.body.appendChild(link);
                    link.click();
                    toastr["info"](`@_localizer["Export successfully"]`);
                })


        }
        var onRoleManage = (index) => {
            var user = $dg.datagrid('getRows')[index];
            axios.get('/authorization/users?handler=AssignedRoles&id=' + user.Id).then(res => {
                console.log(res);
                var roles = res.data;
                $("#manageroles_form input:checkbox").prop('checked', false);
                roles.forEach(role => {
                    $(`#manageroles_form #${role}`).prop('checked', true);
                })
                $('#manageroles_form #UserId').val(user.Id)
                $('#manageroles_modal').modal('toggle');
            })

        }
        $('#register_form :submit').click(function (e) {
            var form = document.querySelector('#register_form');
            $(form).find(":valid").parent().removeClass("was-validated");
            if (form.checkValidity() === false) {
                form.classList.add('was-validated');
            } else {
                var request = $('#register_form').serialize();
                axios.post('/authorization/users?handler=Register', request).then(res => {
                    if (res.data.Succeeded) {
                        toastr["info"]('@_localizer["Register new user success"]');
                        $('#register_modal').modal('toggle');
                        reload();
                    } else {
                        res.data.Errors.forEach(error => {
                            toastr["error"](error);
                        })

                    }
                })
            }
            event.preventDefault();
            event.stopPropagation();
        })
        $('#edituser_form :submit').click(function (e) {
            var form = document.querySelector('#edituser_form');
            $(form).find(":valid").parent().removeClass("was-validated");
            if (form.checkValidity() === false) {
                form.classList.add('was-validated');
            } else {
                var request = $('#edituser_form').serialize();
                axios.post('/authorization/users?handler=Edit', request).then(res => {
                    if (res.data.Succeeded) {
                        toastr["info"]('@_localizer["Save successfully"]');
                        $('#edituser_modal').modal('toggle');
                        reload();
                    } else {
                        res.data.Errors.forEach(error => {
                            toastr["error"](error);
                        })

                    }
                })
            }
            event.preventDefault();
            event.stopPropagation();
        })
        $('#resetpassword_form :submit').click(function (e) {
            console.log('submmit')
            var form = document.querySelector('#resetpassword_form');
            $(form).find(":valid").parent().removeClass("was-validated");
            if (form.checkValidity() === false) {
                form.classList.add('was-validated');
            } else {
                var request = $('#resetpassword_form').serialize();
                axios.post('/authorization/users?handler=ResetPassword', request).then(res => {
                    toastr["info"]('@_localizer["Reset password success"]');
                    $('#resetpassword_modal').modal('toggle');
                    reload();
                })
            }
            event.preventDefault();
            event.stopPropagation();
        })
        $('#manageroles_form :submit').click(function (e) {
            var form = document.querySelector('#manageroles_form');
            $(form).find(":valid").parent().removeClass("was-validated");
            if (form.checkValidity() === false) {
                form.classList.add('was-validated');
            } else {
                var request = $('#manageroles_form').serialize();
                console.log(request)
                axios.post('/authorization/users?handler=AssignRoles', request).then(res => {
                    toastr["info"]('@_localizer["Assign success"]');
                    $('#manageroles_modal').modal('toggle');
                    reload();
                })
            }
            event.preventDefault();
            event.stopPropagation();
        })
         var popupregistermodal = () => {
            $('#register_modal').modal('toggle');
            $('#register_form')[0].reset();

        }
        var popupeditmodal = (user) => {
            $('#edituser_modal').modal('toggle');
            $('#edituser_form')[0].reset();
            $('#edituser_form').jsonToForm(user)
        }
        var popupresetpasswordmodal = (user) => {
            $('#resetpassword_modal').modal('toggle');
            $('#resetpassword_form')[0].reset();
            $('#resetpassword_form').jsonToForm(user)
        }
        $(() => {
            initdatagrid();
			if(connection){
				connection.on("@SignalR.ConnectUser", function (user) {
					toastr["info"](`@_localizer["${user.displayName} logon."]`);
					reload();
                });
				connection.on("@SignalR.DisconnectUser", function (user) {
					toastr["info"](`@_localizer["${user.displayName} logoff."]`);
					reload();
                });
			}
        })


    </script>
}
